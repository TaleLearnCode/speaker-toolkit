// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ConsoleApp1.Models;

public partial class SpeakerToolkitSQLDatabaseContext : DbContext
{
    public SpeakerToolkitSQLDatabaseContext(DbContextOptions<SpeakerToolkitSQLDatabaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<CountryDivision> CountryDivisions { get; set; }

    public virtual DbSet<Engagement> Engagements { get; set; }

    public virtual DbSet<EngagementPresentation> EngagementPresentations { get; set; }

    public virtual DbSet<EngagementPresentationDownload> EngagementPresentationDownloads { get; set; }

    public virtual DbSet<EngagementPresentationSpeaker> EngagementPresentationSpeakers { get; set; }

    public virtual DbSet<EngagementStatus> EngagementStatuses { get; set; }

    public virtual DbSet<EngagementTag> EngagementTags { get; set; }

    public virtual DbSet<EngagementType> EngagementTypes { get; set; }

    public virtual DbSet<Language> Languages { get; set; }

    public virtual DbSet<LearningObjective> LearningObjectives { get; set; }

    public virtual DbSet<Presentation> Presentations { get; set; }

    public virtual DbSet<PresentationRelated> PresentationRelateds { get; set; }

    public virtual DbSet<PresentationSpeaker> PresentationSpeakers { get; set; }

    public virtual DbSet<PresentationTag> PresentationTags { get; set; }

    public virtual DbSet<PresentationText> PresentationTexts { get; set; }

    public virtual DbSet<PresentationType> PresentationTypes { get; set; }

    public virtual DbSet<Speaker> Speakers { get; set; }

    public virtual DbSet<SpeakerAward> SpeakerAwards { get; set; }

    public virtual DbSet<SpeakerAwardType> SpeakerAwardTypes { get; set; }

    public virtual DbSet<SpeakerBiography> SpeakerBiographies { get; set; }

    public virtual DbSet<SpeakerLink> SpeakerLinks { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<TimeZone> TimeZones { get; set; }

    public virtual DbSet<WorldRegion> WorldRegions { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.CountryCode).HasName("pkcCountry");

            entity.ToTable("Country", tb => tb.HasComment("Lookup table representing the countries as defined by the ISO 3166-1 standard."));

            entity.HasIndex(e => e.WorldRegionCode, "idxCountry_WorldRegionCode");

            entity.HasIndex(e => e.WorldSubregionCode, "idxCountry_WorldSubregionCode");

            entity.Property(e => e.CountryCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the country using the ISO 3166-1 Alpha-2 code.");
            entity.Property(e => e.CountryName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Name of the country using the ISO 3166-1 Country Name.");
            entity.Property(e => e.DivisionName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("The primary name of the country''s divisions.");
            entity.Property(e => e.HasDivisions).HasComment("Flag indicating whether the country has divisions (states, provinces, etc.)");
            entity.Property(e => e.IsEnabled).HasComment("Flag indicating whether the country record is enabled.");
            entity.Property(e => e.WorldRegionCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the world region where the country is located.");
            entity.Property(e => e.WorldSubregionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the world subregion where the country is located.");

            entity.HasOne(d => d.WorldRegionCodeNavigation).WithMany(p => p.CountryWorldRegionCodeNavigations)
                .HasForeignKey(d => d.WorldRegionCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkCountry_WorldRegion");

            entity.HasOne(d => d.WorldSubregionCodeNavigation).WithMany(p => p.CountryWorldSubregionCodeNavigations)
                .HasForeignKey(d => d.WorldSubregionCode)
                .HasConstraintName("fkCountry_WorldSubregion");
        });

        modelBuilder.Entity<CountryDivision>(entity =>
        {
            entity.HasKey(e => new { e.CountryCode, e.CountryDivisionCode }).HasName("pkcCountryDivision");

            entity.ToTable("CountryDivision", tb => tb.HasComment("Lookup table representing the world regions as defined by the ISO 3166-2 standard."));

            entity.Property(e => e.CountryCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CountryDivisionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the country division using the ISO 3166-2 Alpha-2 code.");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("The category name of the country division.");
            entity.Property(e => e.CountryDivisionName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Name of the country using the ISO 3166-2 Subdivision Name.");
            entity.Property(e => e.IsEnabled).HasComment("Flag indicating whether the country division record is enabled.");

            entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.CountryDivisions)
                .HasForeignKey(d => d.CountryCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkCountryDivision_Country");
        });

        modelBuilder.Entity<Engagement>(entity =>
        {
            entity.HasKey(e => e.EngagementId).HasName("pkcEngagement");

            entity.ToTable("Engagement", tb => tb.HasComment("Represents an event that the speaker participates in."));

            entity.HasIndex(e => e.Permalink, "unqEngagement_Permalink").IsUnique();

            entity.Property(e => e.EngagementId).HasComment("The identifier of the engagement record.");
            entity.Property(e => e.EndDate).HasComment("The end date of the event.");
            entity.Property(e => e.EndingCost)
                .HasMaxLength(20)
                .HasComment("The ending cost for the event.");
            entity.Property(e => e.EngagementDescription)
                .HasMaxLength(2000)
                .HasComment("The full description of the event.");
            entity.Property(e => e.EngagementName)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name of the engagement.");
            entity.Property(e => e.EngagementStatusId).HasComment("Identifier of the associated engagement status.");
            entity.Property(e => e.EngagementSummary)
                .HasMaxLength(140)
                .HasComment("The summary description of the event.");
            entity.Property(e => e.EngagementTypeId).HasComment("Identifier of the associated engagement type.");
            entity.Property(e => e.EngagementUrl).HasMaxLength(200);
            entity.Property(e => e.ListingLocation)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The location of the event to show on the event listing.");
            entity.Property(e => e.OverviewLocation)
                .HasMaxLength(300)
                .HasComment("The location of the event to show on the overview.");
            entity.Property(e => e.Permalink)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.StartDate).HasComment("The start date of the event.");
            entity.Property(e => e.StartingCost)
                .HasMaxLength(20)
                .HasComment("The starting cost for the event.");

            entity.HasOne(d => d.EngagementStatus).WithMany(p => p.Engagements)
                .HasForeignKey(d => d.EngagementStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkEngagement_EngagementStatus");

            entity.HasOne(d => d.EngagementType).WithMany(p => p.Engagements)
                .HasForeignKey(d => d.EngagementTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkEngagement_EngagementType");
        });

        modelBuilder.Entity<EngagementPresentation>(entity =>
        {
            entity.HasKey(e => e.EngagementPresentationId).HasName("pkcEngagementPresentation");

            entity.ToTable("EngagementPresentation", tb => tb.HasComment("Represents the speaker''s presentations."));

            entity.Property(e => e.EngagementPresentationId).HasComment("Identifier of the EngagementPresentation record.");
            entity.Property(e => e.EndDateTime).HasComment("The ending date and time for the presentation.");
            entity.Property(e => e.EngagementId).HasComment("Identifier of the associated engagement.");
            entity.Property(e => e.PresentationId).HasComment("Identifier of the associated presentation.");
            entity.Property(e => e.Room)
                .HasMaxLength(50)
                .HasComment("The room where the presentation is being presented.");
            entity.Property(e => e.StartDateTime).HasComment("The starting date and time for the presentation.");
            entity.Property(e => e.TimeZone)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.Engagement).WithMany(p => p.EngagementPresentations)
                .HasForeignKey(d => d.EngagementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkEngagementPresentation_Engagement");

            entity.HasOne(d => d.Presentation).WithMany(p => p.EngagementPresentations)
                .HasForeignKey(d => d.PresentationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkEngagementPresentation_Presentation");
        });

        modelBuilder.Entity<EngagementPresentationDownload>(entity =>
        {
            entity.HasKey(e => e.EngagementPresentationDownloadId).HasName("pkcEngagementPresentationDownload");

            entity.ToTable("EngagementPresentationDownload", tb => tb.HasComment("Represents a download associated with a engagement presentation."));

            entity.Property(e => e.EngagementPresentationDownloadId).HasComment("Identifier of the EngagementPresentationDownload record.");
            entity.Property(e => e.DownloadName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DownloadUrl)
                .HasMaxLength(500)
                .HasComment("The link to the download.");
            entity.Property(e => e.EngagementPresentationId).HasComment("Identifier of the associated engagement presentation.");

            entity.HasOne(d => d.EngagementPresentation).WithMany(p => p.EngagementPresentationDownloads)
                .HasForeignKey(d => d.EngagementPresentationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkEngagementPresentationDownload_EngagementPresentation");
        });

        modelBuilder.Entity<EngagementPresentationSpeaker>(entity =>
        {
            entity.HasKey(e => e.EngagementPresentationSpeakerId).HasName("pkcEngagementPresentationSpeaker");

            entity.ToTable("EngagementPresentationSpeaker", tb => tb.HasComment("Represents a speaker presenting an engagement presentation."));

            entity.Property(e => e.EngagementPresentationSpeakerId).HasComment("Identifier of the EngagementPresentationSpeaker record.");
            entity.Property(e => e.EngagementPresentationId).HasComment("Identifier of the engagement presentation.");
            entity.Property(e => e.IsPrimarySpeaker).HasComment("Flag indicating whether the speaker is the primary speaker for the engagement presentation.");
            entity.Property(e => e.SpeakerId).HasComment("Identifier of the assigned speaker.");

            entity.HasOne(d => d.EngagementPresentation).WithMany(p => p.EngagementPresentationSpeakers)
                .HasForeignKey(d => d.EngagementPresentationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkEngagementPresentationSpeaker_EngagementPresentation");

            entity.HasOne(d => d.Speaker).WithMany(p => p.EngagementPresentationSpeakers)
                .HasForeignKey(d => d.SpeakerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkEngagementPresentationSpeaker_Speaker");
        });

        modelBuilder.Entity<EngagementStatus>(entity =>
        {
            entity.HasKey(e => e.EngagementStatusId).HasName("pkcEngagementStatus");

            entity.ToTable("EngagementStatus", tb => tb.HasComment("Represents a status of a engagement."));

            entity.Property(e => e.EngagementStatusId).HasComment("The identifier of the engagement status record.");
            entity.Property(e => e.EngagementStatusName)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The name of the engagement status.");
        });

        modelBuilder.Entity<EngagementTag>(entity =>
        {
            entity.HasKey(e => e.EngagementTagId).HasName("pkcEngagementTag");

            entity.ToTable("EngagementTag", tb => tb.HasComment("Represents the association between a engagement and a tag."));

            entity.HasIndex(e => new { e.EngagementId, e.TagId }, "unqEngagementTag_EngagementId_TagId").IsUnique();

            entity.Property(e => e.EngagementTagId).HasComment("The identifier of the engagement/tag record.");
            entity.Property(e => e.EngagementId).HasComment("Identifier of the associated engagement.");
            entity.Property(e => e.TagId).HasComment("Identifier of the associated tag.");

            entity.HasOne(d => d.Engagement).WithMany(p => p.EngagementTags)
                .HasForeignKey(d => d.EngagementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkEngagementTag_Engagement");

            entity.HasOne(d => d.Tag).WithMany(p => p.EngagementTags)
                .HasForeignKey(d => d.TagId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkEngagementTag_Tag");
        });

        modelBuilder.Entity<EngagementType>(entity =>
        {
            entity.HasKey(e => e.EngagementTypeId).HasName("pkcEngagementType");

            entity.ToTable("EngagementType", tb => tb.HasComment("Represents a type of engagement."));

            entity.Property(e => e.EngagementTypeId).HasComment("The identifier of the engagement type record.");
            entity.Property(e => e.EngagementTypeName)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The name of the engagement type.");
        });

        modelBuilder.Entity<Language>(entity =>
        {
            entity.HasKey(e => e.LanguageCode).HasName("pkcLangauge");

            entity.ToTable("Language", tb => tb.HasComment("Represents a spoken/written language."));

            entity.Property(e => e.LanguageCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the language.");
            entity.Property(e => e.IsEnabled).HasComment("Flag indicating whether the language is enabled.");
            entity.Property(e => e.LanguageName)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("Name of the language.");
            entity.Property(e => e.NativeName)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("Native name of the language.");
        });

        modelBuilder.Entity<LearningObjective>(entity =>
        {
            entity.HasKey(e => e.LearningObjectiveId).HasName("pkcLearningObjective");

            entity.ToTable("LearningObjective", tb => tb.HasComment("Represents a learning objective of a presentation."));

            entity.HasIndex(e => new { e.PresentationTextId, e.SortOrder }, "ucLearningObjective").IsUnique();

            entity.Property(e => e.LearningObjectiveId).HasComment("The identifier of the learning objective record.");
            entity.Property(e => e.LearningObjectiveText)
                .IsRequired()
                .HasMaxLength(300)
                .HasComment("The text of the learning objective.");
            entity.Property(e => e.PresentationTextId).HasComment("The identifier of the associated presentation (text) record.");
            entity.Property(e => e.SortOrder).HasComment("The sorting order of the learning objective.");

            entity.HasOne(d => d.PresentationText).WithMany(p => p.LearningObjectives)
                .HasForeignKey(d => d.PresentationTextId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkLearningObjective_PresentationText");
        });

        modelBuilder.Entity<Presentation>(entity =>
        {
            entity.HasKey(e => e.PresentationId).HasName("pkcPresentation");

            entity.ToTable("Presentation", tb => tb.HasComment("Represents the speaker''s presentations."));

            entity.HasIndex(e => e.Permalink, "unqPresentation_Permalink").IsUnique();

            entity.Property(e => e.PresentationId).HasComment("The identifier of the presentation record.");
            entity.Property(e => e.DefaultLanguageCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("'en'")
                .IsFixedLength()
                .HasComment("The default language to use for the presentation.");
            entity.Property(e => e.IncludeInPublicProfile)
                .IsRequired()
                .HasDefaultValueSql("1")
                .HasComment("Flag indicating whether the presentation is to be include in the public profile.");
            entity.Property(e => e.IsArchived).HasComment("Flag indicating whether the presentation has been archived.");
            entity.Property(e => e.Permalink)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.PresentationTypeId).HasComment("Identifier of the type of presentation is represented.");
            entity.Property(e => e.RepoLink)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.DefaultLanguageCodeNavigation).WithMany(p => p.Presentations)
                .HasForeignKey(d => d.DefaultLanguageCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkPresentation_Language");

            entity.HasOne(d => d.PresentationType).WithMany(p => p.Presentations)
                .HasForeignKey(d => d.PresentationTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkPresentation_PresentationType");
        });

        modelBuilder.Entity<PresentationRelated>(entity =>
        {
            entity.HasKey(e => e.PresentationRelatedId).HasName("pkcPresentationRelated");

            entity.ToTable("PresentationRelated", tb => tb.HasComment("Links two related presentations togethers."));

            entity.HasIndex(e => new { e.PrimaryPresentationId, e.RelatedPresentationId }, "unqPresentationRelated_PresentationId_RelatedPresentationId").IsUnique();

            entity.Property(e => e.PresentationRelatedId).HasComment("The identifier of the related presentation object.");
            entity.Property(e => e.PrimaryPresentationId).HasComment("The identifier of the primary presentation.");
            entity.Property(e => e.RelatedPresentationId).HasComment("The identifier of the related presentation.");
            entity.Property(e => e.SortOrder).HasComment("The sorting order of the related presentation.");

            entity.HasOne(d => d.PrimaryPresentation).WithMany(p => p.PresentationRelatedPrimaryPresentations)
                .HasForeignKey(d => d.PrimaryPresentationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkPresentationRelated_PresentationId");

            entity.HasOne(d => d.RelatedPresentation).WithMany(p => p.PresentationRelatedRelatedPresentations)
                .HasForeignKey(d => d.RelatedPresentationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkPresentationRelated_RelatedPresentationId");
        });

        modelBuilder.Entity<PresentationSpeaker>(entity =>
        {
            entity.HasKey(e => e.PresentationSpeakerId).HasName("pkcPresentationSpeaker");

            entity.ToTable("PresentationSpeaker", tb => tb.HasComment("Links a speaker to a presentation."));

            entity.HasIndex(e => new { e.PresentationId, e.SpeakerId }, "unqPresentationSpeaker_PresentationId_SpeakerId").IsUnique();

            entity.Property(e => e.PresentationSpeakerId).HasComment("The identifier of the presentation speaker record.");
            entity.Property(e => e.IsPrimary).HasComment("Flag indicaitng whether the speaker is the primary speaker for the presentation.");
            entity.Property(e => e.PresentationId).HasComment("Identifier of the associated presentation.");
            entity.Property(e => e.SpeakerId).HasComment("Identifier of the associated speaker.");

            entity.HasOne(d => d.Presentation).WithMany(p => p.PresentationSpeakers)
                .HasForeignKey(d => d.PresentationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkPresentationSpeaker_Presentation");

            entity.HasOne(d => d.Speaker).WithMany(p => p.PresentationSpeakers)
                .HasForeignKey(d => d.SpeakerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkPresentationSpeaker_Speaker");
        });

        modelBuilder.Entity<PresentationTag>(entity =>
        {
            entity.HasKey(e => e.PresentationTagId).HasName("pkcPresentationTag");

            entity.ToTable("PresentationTag", tb => tb.HasComment("Represents the association between a presentation and a tag."));

            entity.HasIndex(e => new { e.PresentationId, e.TagId }, "unqPresentationTag_PresentationId_TagId").IsUnique();

            entity.Property(e => e.PresentationTagId).HasComment("The identifier of the presentation/tag record.");
            entity.Property(e => e.PresentationId).HasComment("Identifier of the associated presentation.");
            entity.Property(e => e.TagId).HasComment("Identifier of the associated tag.");

            entity.HasOne(d => d.Presentation).WithMany(p => p.PresentationTags)
                .HasForeignKey(d => d.PresentationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkPresentationTag_Presentation");

            entity.HasOne(d => d.Tag).WithMany(p => p.PresentationTags)
                .HasForeignKey(d => d.TagId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkPresentationTag_Tag");
        });

        modelBuilder.Entity<PresentationText>(entity =>
        {
            entity.HasKey(e => e.PresentationTextId).HasName("pkcPresentationText");

            entity.ToTable("PresentationText", tb => tb.HasComment("The text for a presentation details in a specific language."));

            entity.HasIndex(e => new { e.PresentationId, e.LanguageCode }, "unqPresentationText_PresentationId_LanguageCode").IsUnique();

            entity.Property(e => e.PresentationTextId).HasComment("The identifier of the presentation text record.");
            entity.Property(e => e.Abstract)
                .HasMaxLength(3000)
                .HasComment("The full abstract for the presentation.");
            entity.Property(e => e.AdditionalDetails).HasMaxLength(3000);
            entity.Property(e => e.LanguageCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PresentationId).HasComment("The identifier of the associated presentation.");
            entity.Property(e => e.PresentationShortTitle)
                .HasMaxLength(60)
                .HasComment("The short title of the presentation.");
            entity.Property(e => e.PresentationTitle)
                .IsRequired()
                .HasMaxLength(300)
                .HasComment("The full title of the presentation.");
            entity.Property(e => e.ShortAbstract)
                .HasMaxLength(2000)
                .HasComment("The short abstract for the presentation.");
            entity.Property(e => e.Summary)
                .HasMaxLength(140)
                .HasComment("The summary for the presentation.");

            entity.HasOne(d => d.LanguageCodeNavigation).WithMany(p => p.PresentationTexts)
                .HasForeignKey(d => d.LanguageCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkPresentationText_Language");

            entity.HasOne(d => d.Presentation).WithMany(p => p.PresentationTexts)
                .HasForeignKey(d => d.PresentationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkPresentationText_Presentation");
        });

        modelBuilder.Entity<PresentationType>(entity =>
        {
            entity.HasKey(e => e.PresentationTypeId).HasName("pkcPresentationType");

            entity.ToTable("PresentationType", tb => tb.HasComment("Represents a type of a presentation."));

            entity.Property(e => e.PresentationTypeId).HasComment("The identifier of the presentation type record.");
            entity.Property(e => e.PresentationTypeName)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The name of the presentation type.");
            entity.Property(e => e.SortOrder).HasComment("The sorting order of the presentation type.");
            entity.Property(e => e.TypeDescription)
                .HasMaxLength(500)
                .HasComment("A description of the presentation type.");
        });

        modelBuilder.Entity<Speaker>(entity =>
        {
            entity.HasKey(e => e.SpeakerId).HasName("pkcSpeaker");

            entity.ToTable("Speaker", tb => tb.HasComment("Details about a speaker."));

            entity.Property(e => e.SpeakerId).HasComment("The identifier of the speaker.");
            entity.Property(e => e.CountryCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Idenfiier of the country where the speaker is located.");
            entity.Property(e => e.CountryDivisionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the country division where the speaker is located.");
            entity.Property(e => e.DefaultLanguageCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("'en'")
                .IsFixedLength()
                .HasComment("The default langauge to use with the speaker.");
            entity.Property(e => e.EnablePublicProfile).HasComment("Flag indicating whether the speaker profile is displayed publicly.");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("The first name of the speaker.");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("The last name of the speaker.");
            entity.Property(e => e.PublicProfileUrl)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.Speakers)
                .HasForeignKey(d => d.CountryCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkSpeaker_Country");

            entity.HasOne(d => d.DefaultLanguageCodeNavigation).WithMany(p => p.Speakers)
                .HasForeignKey(d => d.DefaultLanguageCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkSpeaker_DefaultLanguage");

            entity.HasOne(d => d.CountryDivision).WithMany(p => p.Speakers)
                .HasForeignKey(d => new { d.CountryCode, d.CountryDivisionCode })
                .HasConstraintName("fkSpeaker_CountryDivision");
        });

        modelBuilder.Entity<SpeakerAward>(entity =>
        {
            entity.HasKey(e => e.SpeakerAwardId).HasName("pkcSpeakerAward");

            entity.ToTable("SpeakerAward", tb => tb.HasComment("Represents an award bestowed to a speaker."));

            entity.HasIndex(e => new { e.SpeakerId, e.SpeakerAwardTypeId, e.AwardCategory, e.AwardYear }, "uqcSpeakerAward_SpeakerId_SpeakerAwardTypeId_AwardCategory_AwardYear").IsUnique();

            entity.Property(e => e.SpeakerAwardId).HasComment("The identifier of the speaker award record.");
            entity.Property(e => e.AwardCategory)
                .HasMaxLength(100)
                .HasComment("The identifier of the speaker award record.");
            entity.Property(e => e.AwardProfileUrl)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.AwardYear).HasComment("The identifier of the speaker award record.");
            entity.Property(e => e.SpeakerAwardTypeId).HasComment("The identifier of the speaker award record.");
            entity.Property(e => e.SpeakerId).HasComment("The identifier of the speaker award record.");

            entity.HasOne(d => d.SpeakerAwardType).WithMany(p => p.SpeakerAwards)
                .HasForeignKey(d => d.SpeakerAwardTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkcSpeakerAward_SpeakerAwardTypeId");

            entity.HasOne(d => d.Speaker).WithMany(p => p.SpeakerAwards)
                .HasForeignKey(d => d.SpeakerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkcSpeakerAward_SpeakerId");
        });

        modelBuilder.Entity<SpeakerAwardType>(entity =>
        {
            entity.HasKey(e => e.SpeakerAwardTypeId).HasName("pkcSpeakerAwardType");

            entity.ToTable("SpeakerAwardType", tb => tb.HasComment("Represents a type of a speaker award."));

            entity.Property(e => e.SpeakerAwardTypeId).HasComment("The identifier of the speaker award type record.");
            entity.Property(e => e.HasAwardYears).HasComment("Flag indicating whether the speaker award has award year.");
            entity.Property(e => e.HasCategories).HasComment("Flag indicating whether the speaker award has categories.");
            entity.Property(e => e.SpeakerAwardTypeName)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The name of the speaker award type name.");
        });

        modelBuilder.Entity<SpeakerBiography>(entity =>
        {
            entity.HasKey(e => e.SpeakerBiographyId).HasName("pkcSpeakerBiography");

            entity.ToTable("SpeakerBiography", tb => tb.HasComment("Contains the title and bio of a speaker in a specified langauge."));

            entity.HasIndex(e => new { e.SpeakerId, e.LanguageCode }, "ucSpeakerBiography_Speaker_Language").IsUnique();

            entity.Property(e => e.SpeakerBiographyId).HasComment("The identifier of the speaker bio record.");
            entity.Property(e => e.Biography)
                .IsRequired()
                .HasMaxLength(4000)
                .HasComment("The biography for the speaker.");
            entity.Property(e => e.LanguageCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Code of the associated language.");
            entity.Property(e => e.SpeakerId).HasComment("The identifier of the speaker.");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(160)
                .HasComment("The title for the speaker.");

            entity.HasOne(d => d.LanguageCodeNavigation).WithMany(p => p.SpeakerBiographies)
                .HasForeignKey(d => d.LanguageCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkSpeakerBiography_Language");

            entity.HasOne(d => d.Speaker).WithMany(p => p.SpeakerBiographies)
                .HasForeignKey(d => d.SpeakerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkSpeakerBiography_Speaker");
        });

        modelBuilder.Entity<SpeakerLink>(entity =>
        {
            entity.HasKey(e => e.SpeakerLinkId).HasName("pkcSpeakerLink");

            entity.ToTable("SpeakerLink", tb => tb.HasComment("Represents a link to a website/social media profile."));

            entity.Property(e => e.SpeakerLinkId).HasComment("The identifier of the link record.");
            entity.Property(e => e.LinkType)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The type of link being represented.");
            entity.Property(e => e.LinkUrl)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The URL of the link.");
            entity.Property(e => e.SpeakerId).HasComment("The identifier of the associated speaker.");

            entity.HasOne(d => d.Speaker).WithMany(p => p.SpeakerLinks)
                .HasForeignKey(d => d.SpeakerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkcSpeakerLink_SpeakerId");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.TagId).HasName("pkcTag");

            entity.ToTable("Tag", tb => tb.HasComment("Represents a label attached to a presentation."));

            entity.Property(e => e.TagId).HasComment("The identifier of the tag record.");
            entity.Property(e => e.TagName)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The name of the tag.");
        });

        modelBuilder.Entity<TimeZone>(entity =>
        {
            entity.HasKey(e => e.TimeZoneId).HasName("pkcTimeZone");

            entity.ToTable("TimeZone", tb => tb.HasComment("Represents the list of time zones as defined by the IANA."));

            entity.Property(e => e.TimeZoneId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("The identifier of the time zone as defined by the IANA.");
            entity.Property(e => e.Dstabbreviation)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IANA abbreviation for the time zone when in daylight savings time.")
                .HasColumnName("DSTAbbreviation");
            entity.Property(e => e.DstoffsetMinutes)
                .HasComment("The number of minutes offset from UTC when in daylight savings time.")
                .HasColumnName("DSTOffsetMinutes");
            entity.Property(e => e.DstoffsetName)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("THe name of the offset when in daylight savings time.")
                .HasColumnName("DSTOffsetName");
            entity.Property(e => e.Stdabbreviation)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IANA abbreviation for the time zone when in standard time.")
                .HasColumnName("STDAbbreviation");
            entity.Property(e => e.StdoffsetMinutes)
                .HasComment("The number of minutes offset from UTC when in standard time.")
                .HasColumnName("STDOffsetMinutes");
            entity.Property(e => e.StdoffsetName)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The name of the offset when in standard time.")
                .HasColumnName("STDOffsetName");
            entity.Property(e => e.UtcoffsetId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The letter designation for the UTC time offset.")
                .HasColumnName("UTCOffsetId");
        });

        modelBuilder.Entity<WorldRegion>(entity =>
        {
            entity.HasKey(e => e.WorldRegionCode).HasName("pkcWorldRegion");

            entity.ToTable("WorldRegion", tb => tb.HasComment("Lookup table representing the world regions as defined by the UN M49 specification."));

            entity.HasIndex(e => e.ParentId, "idxWorldRegion_ParentId");

            entity.Property(e => e.WorldRegionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the world region.");
            entity.Property(e => e.IsEnabled).HasComment("Flag indicating whether the world region is enabled.");
            entity.Property(e => e.ParentId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the world region parent (for subregions).");
            entity.Property(e => e.WorldRegionName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Name of the world region.");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("fkWorldRegion_WorldRegion");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}